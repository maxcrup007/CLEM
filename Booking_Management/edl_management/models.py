from django.db import modelsfrom django.conf import settingsfrom django.contrib.auth.models import User, AbstractUserfrom django.urls import reversefrom django.db.models.signals import post_savefrom django.contrib.contenttypes.fields import GenericForeignKeyfrom django.contrib.contenttypes.fields import GenericRelationfrom django.contrib.contenttypes.models import ContentTypefrom django.core.serializers.json import DjangoJSONEncoderfrom model_utils.models import TimeStampedModelfrom django.db import modelsfrom django.dispatch import receiverfrom .manager import *import uuid# Create your models here.class Lab(models.Model):    LAB_CATEGORIES = (        ('ห้องศึกษาค้นคว้าอิสระ/ห้องเก็บวัสดุวิทยาศาสตร์และสารเคมี', 'ห้องศึกษาค้นคว้าอิสระ/ห้องเก็บวัสดุวิทยาศาสตร์และสารเคมี'),        ('ห้องปฏิบัติการวิจัยเซลล์และชีวโมเลกุล', 'ห้องปฏิบัติการวิจัยเซลล์และชีวโมเลกุล'),        ('ห้องปฏิบัติการเพาะเลี้ยงเซลล์', 'ห้องปฏิบัติการเพาะเลี้ยงเซลล์'),        ('ห้องปฏิบัติการชีวโมเลกุล', 'ห้องปฏิบัติการชีวโมเลกุล'),        ('ห้องปฏิบัติชีวเคมีและเคมีวิเคราะห์', 'ห้องปฏิบัติชีวเคมีและเคมีวิเคราะห์'),        ('ห้องปฏิบัติการจุลชีววิทยาและปรสิตวิทยา', 'ห้องปฏิบัติการจุลชีววิทยาและปรสิตวิทยา'),        ('ห้องปฏิบัติการเชื้อรา', 'ห้องปฏิบัติการเชื้อรา'),        ('ห้องปฏิบัติการแบคทีเรีย', 'ห้องปฏิบัติการแบคทีเรีย'),        ('ห้องปฏิบัติการพยาธิวิทยากายวิภาค', 'ห้องปฏิบัติการพยาธิวิทยากายวิภาค'),        ('ห้องปฏิบัติการทางคลินิก', 'ห้องปฏิบัติการทางคลินิก'),        ('ห้องปฏิบัติการโรคติดเชื้อ 1', 'ห้องปฏิบัติการโรคติดเชื้อ 1'),        ('ห้องปฏิบัติการโรคติดเชื้อ 2', 'ห้องปฏิบัติการโรคติดเชื้อ 2'),    )    name = models.CharField(max_length=100, null=True)    number = models.CharField(max_length=10, null=True)    intendant = models.CharField(max_length=100)    capacity = models.IntegerField(default=10)    description = models.TextField(blank=True, null=True)    photo = models.ImageField(default='lab.jpg', blank=True, null=True, upload_to='lab_image')    def __str__(self):        return f'{self.number} {self.name} 'class Booking(models.Model):    borrower = models.ForeignKey('Profile', on_delete=models.CASCADE, null=True)    lab = models.ForeignKey(Lab, on_delete=models.CASCADE)    official_working = models.BooleanField(blank=True, null=True)    check_in = models.DateTimeField()    check_out = models.DateTimeField()    def __str__(self):        return f'{self.borrower} has booked {self.lab} from 'class Equipment(models.Model):    number = models.CharField(max_length=100, null=True)    name = models.CharField(max_length=200)    lender = models.CharField(max_length=100, blank=True, null=True)    summary = models.TextField(max_length=1000, help_text="Enter a brief description of the book", blank=True, null=True)    equipment_at = models.ForeignKey('Lab', on_delete=models.SET_NULL, null=True)    photo = models.ImageField(blank=True, null=True, upload_to='device_image')    def __str__(self):        return f'{self.name} หมายเลขครุภัณฑ์: {self.number}'class Profile(models.Model):    classlist = (('นักวิจัย', 'นักวิจัย'),                 ('นิสิต', 'นิสิต'),                 ('อาจารย์', 'อาจารย์'),                 ('บุคคลภายนอก', 'บุคคลภายนอก'),                 )    user = models.OneToOneField(User, on_delete=models.CASCADE)    status = models.CharField(max_length=100, choices=classlist, default='นักวิจัย') # user_cate    information = models.TextField(null=True, blank=True)    contact = models.CharField(max_length=20, null=True)    tel = models.CharField(max_length=10, null=True)    faculty = models.CharField(max_length=50, null=True, blank=True)    branch = models.CharField(max_length=50, null=True, blank=True)    photo_profile = models.ImageField(default='default.png', upload_to='photo_profile', blank=True, null=True)    def __str__(self):        return f'{self.user.first_name} {self.user.last_name}'    def __unicode__(self):        return unicode(self.user.first_name + ' ' + self.user.last_name)    def create_profile(sender, **kwargs):        if kwargs['created']:            user_profile = Profile.objects.create(user=kwargs['instance'])        pass    post_save.connect(create_profile, sender=User)class Project(models.Model):    object = (('ทำวิจัย', 'ทำวิจัย'),                 ('การเรียนการสอน/IS', 'การเรียนการสอน/IS'),                 ('อื่นๆ', 'อื่นๆ'),                 )    usage = (('endopoint', 'endopoint'),              ('kinatic', 'kinatic'), )    # add user    user = models.ForeignKey(Profile, on_delete=models.CASCADE, null=True)    objective = models.CharField(max_length=100, choices=object, default='ทำวิจัย')    project_name = models.CharField(max_length=100, null=True)    example = models.CharField(max_length=100, null=True, blank=True, help_text="สารตัวอย่างที่นำมาใช้งาน เช่น Freeze dry เช่น สารสกัดสมุนไพร, ชิ้นผลไม้, ข้าว (หากเป็นชิ้นงาน ควรจะมีขนาดหนาไม่เกิน 2 cm.)",)    substance = models.IntegerField(blank=True, null=True, help_text='ปริมาณสารทั้งหมดที่นำมาใช้ เช่น Freeze dry (เนื่องจากต้องมีปริมาณน้ำที่จำกัดในการFreeze dry อยู่ที่ไม่เกิน 2000 ml. ต่อการทำแห้ง 1 รอบ) ' )    catalyst = models.CharField(max_length=100, null=True, blank=True, help_text="สารตัวอย่างที่นำเร่่งปฎิกิริยา", )    experiment_variable = models.CharField(max_length=250, help_text='โปรดระบุชนิดหรือปริมาณสารเคมี,เซลล์หรือสิ่งที่เข้ามาใช้ในห้องทดลอง', blank=True)    scientific_usage = models.CharField(max_length=100, choices=usage, help_text='ลักษณะการใช้งานภายในโครงการ', blank=True, null=True)    def __str__(self):        return f"{self.project_name}"class BookEquipmentLetter(models.Model):    OPTION = (('Accept', 'Accept'),              ('Deny', 'Deny'))    request_status = (        ('Select', 'Select'),        ('Approved', 'Approved'),        ('Denied', 'Denied'),    )    equipment = models.ForeignKey(Equipment, on_delete=models.CASCADE, help_text='ครุภัณฑ์ที่ต้องการใช้งาน')    project = models.ForeignKey(Project, on_delete=models.CASCADE, help_text='โครงการที่ทำอยู่', null=True, blank=True)    start_reservation = models.DateTimeField(unique=True)    end_reservation = models.DateTimeField(unique=True)    comment = models.CharField(max_length=255, help_text='เหตุผลในการใช้งานครุภัณฑ์เพื่อประกอบคำร้อง', blank=True)    description = models.TextField(blank=True)    official_working = models.CharField(max_length=10, blank=True, null=True)    confirm = models.CharField(max_length=10, null=True, choices=OPTION, help_text='โดยข้าพเจ้าได้อ่านระเบียบการใช้ห้องปฏิบัติการวิจัยกลางคณะวิทยาศาสตร์การแพทย์ มหาวิทยาลัยพะเยา และยินยอมปฏิบัติตามกฎระเบียบดังกล่าวทุกประการ ในระหว่างปฏิบัติงาน หากห้องปฏิบัติการ เครื่องมือ อุปกรณ์ เกิดการชำรุดหรือเสียหาย ข้าพเจ้ายินดีรับผิดชอบชดใช้ค่าเสียหายที่เกิดขึ้น',)    status = models.CharField(max_length=20, choices=request_status, default='Select')    def __str__(self):        return f"โครงการ {self.project} ต้องการใช้งาน {self.equipment.name}"